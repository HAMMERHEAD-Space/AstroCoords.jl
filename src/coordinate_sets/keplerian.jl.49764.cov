        - export Keplerian
        - """
        -     Keplerian{T} <: AstroCoord
        - 
        - Keplerian Orbital Elements. 6D parameterziation of the orbit.
        - a - semi-major axis
        - e - eccetricity 
        - i - inclination 
        - Ω - Right Ascension of Ascending Node 
        - ω - Argument of Perigee
        - f - True Anomaly
        - 
        - Constructors
        - Keplerian(a, e, i, Ω, ω, f)
        - Keplerian(X::AbstractArray)
        - Keplerian(X::AstroCoord, μ::Number)
        - 
        - """
        - struct Keplerian{T} <: AstroCoord{6,T}
        -     a::T
        -     e::T
        -     i::T
        -     Ω::T
        -     ω::T
        -     f::T
     1135     @inline Keplerian{T}(a, e, i, Ω, ω, f) where {T} = new{T}(a, e, i, Ω, ω, f)
        -     @inline Keplerian{T}(p::Keplerian{T}) where {T} = new{T}(p.a, p.e, p.i, p.Ω, p.ω, p.f)
        - end
        - 
        - # ~~~~~~~~~~~~~~~ Constructors ~~~~~~~~~~~~~~~ #
        - Keplerian(X::AbstractVector{T}) where {T} = Keplerian{T}(X[1], X[2], X[3], X[4], X[5], X[6])
        - function Keplerian(a::A, e::E, i::I, Ω::O, ω::W, f::F) where {A,E,I,O,W,F}
        -     return Keplerian{promote_type(A, E, I, O, W, F)}(a, e, i, Ω, ω, f)
        - end
     1135 (::Type{K})(g::StaticVector) where {K<:Keplerian} = K(g[1], g[2], g[3], g[4], g[5], g[6])
        - 
        - # ~~~~~~~~~~~~~~~ Conversions ~~~~~~~~~~~~~~~ #
     1176 params(g::Keplerian{T}) where {T<:Number} = SVector{6,T}(g.a, g.e, g.i, g.Ω, g.ω, g.f)
        - 
        - # ~~~~~~~~~~~~~~~ Initializers ~~~~~~~~~~~~~~~ #
        - function Base.one(::Type{K}; T::DataType=Float64) where {K<:Keplerian}
        -     return K{T}(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
        - end
        - 
        - # ~~~~~~~~~~~~~~~ StaticArrays Interface ~~~~~~~~~~~~~~~ #
      576 function Base.getindex(p::Keplerian{T}, i::Int) where {T<:Number}
      576     if i == 1
       96         return p.a
      480     elseif i == 2
       96         return p.e
      384     elseif i == 3
       96         return p.i
      288     elseif i == 4
       96         return p.Ω
      192     elseif i == 5
       96         return p.ω
       96     elseif i == 6
       96         return p.f
        -     else
        0         throw(BoundsError(p, i))
        -     end
        - end
        - 
        - #TODO: Return other anomalies
