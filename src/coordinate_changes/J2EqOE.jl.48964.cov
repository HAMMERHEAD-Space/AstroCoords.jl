        - """
        -     function koeM2IOE(u::AbstractVector{T}, μ::V) where {T<:Number, V<:Number}
        -         
        - Computes the Intermediate Orbit Elements from a Keplerian set.
        - 
        - # Arguments
        - -`u::AbstractVector{<:Number}`: The Keplerian state vector [a; e; i; Ω(RAAN); ω(AOP); M(Mean Anomaly)].
        - -`μ::Number`: Standard graviational parameter of central body.
        - 
        - # Returns
        - -`u_IOE::SVector{6, <:Number}`: The Intermediate Orbit Element vector [I1; I2; I3; I4; I5; I6].
        - """
      171 function koe2IOE(u::AbstractVector{T}, μ::V) where {T<:Number,V<:Number}
      225     RT = promote_type(T, V)
        - 
      240     a, e, i, Ω, ω, f = u
        - 
      209     M = trueAnomaly2MeanAnomaly(f, e)
        - 
      178     I1 = a
      197     I2 = e * sin(M)
      197     I3 = e * cos(M)
      197     I4 = sin(i / 2.0) * sin(Ω)
      197     I5 = sin(i / 2.0) * cos(Ω)
      197     I6 = rem2pi(M + ω + Ω, RoundDown)
        - 
      197     return SVector{6,RT}(I1, I2, I3, I4, I5, I6)
        - end
        - 
        - """
        -     function IOE2koeM(u::AbstractVector{T}, μ::V) where {T<:Number, V<:Number}
        - 
        - Computes the Keplerian orbital elements from a Intermediate Orbit Element set.
        - 
        - # Arguments
        - -`u::AbstractVector{<:Number}`: The Intermediate Orbit Element vector [I1; I2; I3; I4; I5; I6].
        - -`μ::Number`: Standard graviational parameter of central body.
        - 
        - # Returns
        - -`u_koeM::SVector{6, <:Number}`: The Keplerian state vector [a; e; i; Ω(RAAN); ω(AOP); M(Mean Anomaly)].
        - """
     1362 function IOE2koe(u::AbstractVector{T}, μ::V) where {T<:Number,V<:Number}
     2407     RT = promote_type(T, V)
        - 
     2472     I1, I2, I3, I4, I5, I6 = u
        - 
     2062     a = I1
     2267     e = √(I2^2 + I3^2)
     2195     i = 2.0 * asin(√(I4^2 + I5^2))
     2195     Ω = atan(I4, I5)
     2267     M = atan(I2, I3)
     2195     ω = I6 - Ω - M
        - 
     2195     f = meanAnomaly2TrueAnomaly(M, e)
        - 
     2195     return SVector{6,RT}(a, e, i, Ω, ω, f)
        - end
        - 
        - """
        -     function modEq2IOE(u::AbstractVector{T}, μ::V) where {T<:Number, V<:Number}
        - 
        - Computes the Intermediate Orbit Elements from a Modified Equinoctial set.
        - 
        - # Arguments
        - -`u::AbstractVector{<:Number}`: The Modified Equinoctial state vector [p; f; g; h; k; L].
        - -`μ::Number`: Standard graviational parameter of central body.
        - 
        - # Returns
        - -`u_IOE::SVector{6, <:Number}`: The Intermediate Orbit Element vector [I1; I2; I3; I4; I5; I6].
        - """
       73 function modEqN2IOE(u::AbstractVector{T}, μ::V) where {T<:Number,V<:Number}
       73     RT = promote_type(T, V)
        - 
       73     n, f, g, h, k, L = u
        - 
       73     I1 = ∛(μ / n^2)
       73     I2 = g * sin(L) - f * cos(L)
       73     I3 = f * sin(L) + g * cos(L)
       73     I4 = h / √(1 + h^2 + k^2)
       73     I5 = k / √(1 + h^2 + k^2)
       73     I6 = L
        - 
       73     return SVector{6,RT}(I1, I2, I3, I4, I5, I6)
        - end
        - 
        - """
        -     function IOE2modEq(u::AbstractVector{T}, μ::V) where {T<:Number, V<:Number}
        - 
        - Computes the Modified Equinoctial orbital elements from a Intermediate Orbit Element set.
        - 
        - # Arguments
        - -`u::AbstractVector{<:Number}`: The Intermediate Orbit Element vector [I1; I2; I3; I4; I5; I6].
        - -`μ::Number`: Standard graviational parameter of central body.
        - 
        - # Returns
        - -`u_modEq::SVector{6, <:Number}`: The Modified Equinoctial state vector [n; f; g; h; k; L].
        - """
      170 function IOE2modEqN(u::AbstractVector{T}, μ::V) where {T<:Number,V<:Number}
      224     RT = promote_type(T, V)
        - 
      263     I1, I2, I3, I4, I5, I6 = u
        - 
      177     a = I1
      196     n = √(μ / a^3)
      196     f = I3 * sin(I6) - I2 * cos(I6)
      196     g = I2 * sin(I6) + I3 * cos(I6)
      196     h = I4 / √(1 - I4^2 - I5^2)
      196     k = I5 / √(1 - I4^2 - I5^2)
      177     L = I6
        - 
      196     return SVector{6,RT}(n, f, g, h, k, L)
        - end
        - 
        - ################################################################
        - # J2 Perturbed Equinoctial Orbital Elements
        - # Algorithm Steps
        - # These are broken out to test the individual steps
        - # See Appendix: Numerical Example
        - # Aristoff JM, Horwood JT, Alfriend KT (2021) On a set of J2 equinoctial orbital
        - # elements and their use for uncertainty propagation. Celestial Mechanics and
        - # Dynamical Astronomy 133(9):1–19
        - ################################################################
        - 
     1289 @inline function _step1(u::AbstractVector{<:Number}, μ::Number)
     2171     aⱼ₂, eⱼ₂, Iⱼ₂, hⱼ₂, gⱼ₂, fⱼ₂ = IOE2koe(u, μ)
     2206     Lⱼ₂ = trueAnomaly2MeanAnomaly(fⱼ₂, eⱼ₂)
        - 
     2122     return aⱼ₂, eⱼ₂, Iⱼ₂, hⱼ₂, gⱼ₂, fⱼ₂, Lⱼ₂
        - end
        - 
     1284 @inline function _step2(J2::Number, Req::Number, eⱼ₂::Number, aⱼ₂::Number, Iⱼ₂::Number)
     2117     k = 0.5 * J2 * Req^2
     2117     η = √(1.0 - eⱼ₂^2)
     2117     γ = k / aⱼ₂^2
     3401     γ′ = γ / η^4.0
     2117     θ = cos(Iⱼ₂)
        - 
     2117     return k, η, γ, γ′, θ
        - end
        - 
     1283 @inline function _step3(fⱼ₂::Number, eⱼ₂::Number)
     2116     Eⱼ₂ = trueAnomaly2EccentricAnomaly(fⱼ₂, eⱼ₂)
        - 
     1983     return Eⱼ₂
        - end
        - 
     1285 @inline function _step4(aⱼ₂::Number, eⱼ₂::Number, η::Number, Eⱼ₂::Number, Lⱼ₂::Number)
     2118     rⱼ₂ = aⱼ₂ * (1.0 - eⱼ₂ * cos(Eⱼ₂))
     2118     νⱼ₂ = atan(η * sin(Eⱼ₂), cos(Eⱼ₂) - eⱼ₂)
        -     #* Branch cut correction
     2118     b_cut = νⱼ₂ - π
     2118     Lⱼ₂ = Lⱼ₂ + ceil((b_cut - Lⱼ₂) / (2π))
        - 
     2118     return rⱼ₂, νⱼ₂, Lⱼ₂
        - end
        - 
     1288 @inline function _step5(
        -     aⱼ₂::Number,
        -     γ::Number,
        -     γ′::Number,
        -     θ::Number,
        -     rⱼ₂::Number,
        -     η::Number,
        -     eⱼ₂::Number,
        -     gⱼ₂::Number,
        -     νⱼ₂::Number,
        -     Lⱼ₂::Number,
        - )
     3409     a =
        -         aⱼ₂ * (
        -             1 +
        -             γ * (
        -                 (-1 + 3 * θ^2) * ((aⱼ₂^3.0) / (rⱼ₂^3.0) - η^(-3.0)) +
        -                 3 * (1 - θ^2) * (aⱼ₂^3.0) / (rⱼ₂^3.0) * cos(2 * gⱼ₂ + 2 * νⱼ₂)
        -             )
        -         )
     2121     δh =
        -         -0.5 *
        -         γ′ *
        -         θ *
        -         (
        -             6 * (νⱼ₂ - Lⱼ₂ + eⱼ₂ * sin(νⱼ₂)) - 3 * sin(2 * gⱼ₂ + 2 * νⱼ₂) -
        -             3 * eⱼ₂ * sin(2 * gⱼ₂ + νⱼ₂) - eⱼ₂ * sin(2 * gⱼ₂ + 3 * νⱼ₂)
        -         )
        - 
     2121     return a, δh
        - end
        - 
     1284 @inline function _step6(
        -     γ′::Number,
        -     θ::Number,
        -     νⱼ₂::Number,
        -     Lⱼ₂::Number,
        -     eⱼ₂::Number,
        -     gⱼ₂::Number,
        -     hⱼ₂::Number,
        -     δh::Number,
        - )
     2117     Σlgh =
        -         0.25 *
        -         γ′ *
        -         (
        -             6 * (-1 + 5 * θ^2) * (νⱼ₂ - Lⱼ₂ + eⱼ₂ * sin(νⱼ₂)) +
        -             (3 - 5 * θ^2) * (
        -                 3 * sin(2 * gⱼ₂ + 2 * νⱼ₂) +
        -                 3 * eⱼ₂ * sin(2 * gⱼ₂ + νⱼ₂) +
        -                 eⱼ₂ * sin(2 * gⱼ₂ + 3 * νⱼ₂)
        -             )
        -         ) +
        -         δh +
        -         Lⱼ₂ +
        -         gⱼ₂ +
        -         hⱼ₂
        - 
     1984     return Σlgh
        - end
        - 
     1285 @inline function _step7(
        -     νⱼ₂::Number,
        -     eⱼ₂::Number,
        -     η::Number,
        -     aⱼ₂::Number,
        -     rⱼ₂::Number,
        -     γ::Number,
        -     γ′::Number,
        -     θ::Number,
        -     gⱼ₂::Number,
        - )
     2118     v1 = 3 * cos(νⱼ₂) + 3 * eⱼ₂ * cos(νⱼ₂)^2 + eⱼ₂^2 * cos(νⱼ₂)^3
     3403     v2 = η^(-6.0) * (eⱼ₂ * η + eⱼ₂ / (1 + η) + v1)
     3403     v3 = η^(-6.0) * (eⱼ₂ + v1)
     2118     v4 = ((aⱼ₂ * η) / rⱼ₂)^2 + aⱼ₂ / rⱼ₂
        - 
     2118     δe =
        -         0.5 *
        -         η^2 *
        -         (
        -             γ * ((-1 + 3 * θ^2) * v2 + 3 * (1 - θ^2) * v3 * cos(2 * gⱼ₂ + 2 * νⱼ₂)) -
        -             γ′ * (1 - θ^2) * (3 * cos(2 * gⱼ₂ + νⱼ₂) + cos(2 * gⱼ₂ + 3 * νⱼ₂))
        -         )
     2118     e″δL =
        -         -0.25 *
        -         η^3 *
        -         γ′ *
        -         (
        -             2 * (-1 + 3 * θ^2) * (v4 + 1) * sin(νⱼ₂) +
        -             3 *
        -             (1 - θ^2) *
        -             ((-v4 + 1) * sin(2 * gⱼ₂ + νⱼ₂) + (v4 + 1 / 3) * sin(2 * gⱼ₂ + 3 * νⱼ₂))
        -         )
        - 
     2118     return v1, v2, v3, v4, δe, e″δL
        - end
        - 
     1283 @inline function _step8(
        -     γ′::Number, θ::Number, νⱼ₂::Number, eⱼ₂::Number, gⱼ₂::Number, δh::Number, Iⱼ₂::Number
        - )
     2116     δI =
        -         0.5 *
        -         γ′ *
        -         θ *
        -         √(1 - θ^2) *
        -         (
        -             3 * cos(2 * gⱼ₂ + 2 * νⱼ₂) +
        -             3 * eⱼ₂ * cos(2 * gⱼ₂ + νⱼ₂) +
        -             eⱼ₂ * cos(2 * gⱼ₂ + 3 * νⱼ₂)
        -         )
     2116     sin_half_I″_δh = (sin(Iⱼ₂) * δh) / (2 * cos(0.5 * Iⱼ₂))
        - 
     2116     return δI, sin_half_I″_δh
        - end
        - 
     1285 @inline function _step9(
        -     a::Number,
        -     eⱼ₂::Number,
        -     δe::Number,
        -     e″δL::Number,
        -     Lⱼ₂::Number,
        -     Iⱼ₂::Number,
        -     δI::Number,
        -     sin_half_I″_δh::Number,
        -     hⱼ₂::Number,
        -     Σlgh::Number,
        - )
     1985     I1 = a
     2118     I2 = (eⱼ₂ + δe) * sin(Lⱼ₂) + e″δL * cos(Lⱼ₂)
     2118     I3 = (eⱼ₂ + δe) * cos(Lⱼ₂) - e″δL * sin(Lⱼ₂)
     2118     I4 = (sin(0.5 * Iⱼ₂) + cos(0.5 * Iⱼ₂) * 0.5 * δI) * sin(hⱼ₂) + sin_half_I″_δh * cos(hⱼ₂)
     2118     I5 = (sin(0.5 * Iⱼ₂) + cos(0.5 * Iⱼ₂) * 0.5 * δI) * cos(hⱼ₂) - sin_half_I″_δh * sin(hⱼ₂)
     1985     I6 = Σlgh
        - 
     2118     return I1, I2, I3, I4, I5, I6
        - end
        - 
        - """
        -     function J2IOE2IOE(u::AbstractVector{T}, μ::V) where {T<:Number, V<:Number}
        - 
        - Computes the Intermediate Orbit Elements from a J2 Perturbed Intermediate Orbit Element set.
        - 
        - # Arguments
        - -`u::AbstractVector{<:Number}`: The J2 Perturbed Intermediate Orbit Element vector [a; e; i; Ω(RAAN); ω(AOP); f(True Anomaly)].
        - -`μ::Number`: Standard graviational parameter of central body.
        - 
        - # Returns
        - -`u_IOE::SVector{6, <:Number}`: The Intermediate Orbit Element vector [I1; I2; I3; I4; I5; I6].
        - """
     3369 function J2IOE2IOE(
        -     u::AbstractVector{T}, μ::V; J2::W=1.0826261738522e-03, Req::Z=6.378137e+03
        - ) where {T<:Number,V<:Number,W<:Number,Z<:Number}
     2297     RT = promote_type(T, V, W, Z)
        - 
     2557     aⱼ₂, eⱼ₂, Iⱼ₂, hⱼ₂, gⱼ₂, fⱼ₂, Lⱼ₂ = _step1(u, μ)
     3585     _, η, γ, γ′, θ = _step2(J2, Req, eⱼ₂, aⱼ₂, Iⱼ₂)
     2101     Eⱼ₂ = _step3(fⱼ₂, eⱼ₂)
     2245     rⱼ₂, νⱼ₂, Lⱼ₂ = _step4(aⱼ₂, eⱼ₂, η, Eⱼ₂, Lⱼ₂)
     3369     a, δh = _step5(aⱼ₂, γ, γ′, θ, rⱼ₂, η, eⱼ₂, gⱼ₂, νⱼ₂, Lⱼ₂)
     2101     Σlgh = _step6(γ′, θ, νⱼ₂, Lⱼ₂, eⱼ₂, gⱼ₂, hⱼ₂, δh)
     3369     _, _, _, _, δe, e″δL = _step7(νⱼ₂, eⱼ₂, η, aⱼ₂, rⱼ₂, γ, γ′, θ, gⱼ₂)
     2101     δI, sin_half_I″_δh = _step8(γ′, θ, νⱼ₂, eⱼ₂, gⱼ₂, δh, Iⱼ₂)
        - 
     2101     return SVector{6,RT}(_step9(a, eⱼ₂, δe, e″δL, Lⱼ₂, Iⱼ₂, δI, sin_half_I″_δh, hⱼ₂, Σlgh))
        - end
        - 
        - """
        -     function IOE2J2IOE(u::AbstractVector{T}, μ::V) where {T<:Number, V<:Number}
        - 
        - Computes the J2 Perturbed Intermediate Orbit Elements from a Intermediate Orbit Element set.
        - 
        - # Arguments
        - -`u::AbstractVector{<:Number}`: The Intermediate Orbit Element vector [I1; I2; I3; I4; I5; I6].
        - -`μ::Number`: Standard graviational parameter of central body.
        - 
        - # Returns
        - -`u_J2IOR::SVector{6, <:Number}`: The J2 Perturbed Intermediate Orbit Element vector [a; e; i; Ω(RAAN); ω(AOP); f(True Anomaly)].
        - """
      368 function IOE2J2IOE(
        -     u::AbstractVector{T},
        -     μ::V;
        -     Req::W=6.378137e+03,
        -     tol::AbstractFloat=10 * eps(promote_type(T, V)),
        -     max_iter::Int=100,
        - ) where {T<:Number,V<:Number,W<:Number}
      225     RT = promote_type(T, V, W)
        - 
        -     # Pre-allocate vectors for iteration
      209     scale = SVector{6,RT}(Req, 1.0, 1.0, 1.0, 1.0, 1.0)
      209     u_J2IOE_guess = SVector{6,RT}(u[1], u[2], u[3], u[4], u[5], u[6])
      197     u_IOE_guess = similar(u_J2IOE_guess)
      197     residual = similar(u_J2IOE_guess)
        - 
        -     # Initial guess setup
      387     u_J2IOE_guess = SVector{6,RT}(
        -         max(u_J2IOE_guess[1], 1e-2),
        -         clamp(u_J2IOE_guess[2], -1.0, 1.0),
        -         clamp(u_J2IOE_guess[3], -1.0, 1.0),
        -         clamp(u_J2IOE_guess[4], -1.0, 1.0),
        -         clamp(u_J2IOE_guess[5], -1.0, 1.0),
        -         u_J2IOE_guess[6],
        -     )
        - 
        -     # Iteration variables
      178     iter = 0
      197     error = typemax(Float64)
      178     best_residual = error
      178     best_guess = u_J2IOE_guess
        - 
     2290     while error > tol && iter < max_iter
     2028         iter += 1
        - 
        -         # Compute IOE guess from J2IOE guess
     2112         u_IOE_guess = J2IOE2IOE(u_J2IOE_guess, μ)
     2112         u_IOE_guess = (
        -             u_IOE_guess[1] / scale[1],
        -             u_IOE_guess[2] / scale[2],
        -             u_IOE_guess[3] / scale[3],
        -             u_IOE_guess[4] / scale[4],
        -             u_IOE_guess[5] / scale[5],
        -             u_IOE_guess[6] / scale[6],
        -         )
        - 
        -         # Branch cut correction
     2112         b_cut = u_J2IOE_guess[6] - π
     2100         u_IOE_guess = SVector{6,RT}(
        -             u_IOE_guess[1],
        -             u_IOE_guess[2],
        -             u_IOE_guess[3],
        -             u_IOE_guess[4],
        -             u_IOE_guess[5],
        -             u_IOE_guess[6] + 2π * ceil((b_cut - u_IOE_guess[6]) / (2π)),
        -         )
        - 
        -         # Compute residual
     2112         residual = (
        -             u[1] / scale[1] - u_IOE_guess[1],
        -             u[2] / scale[2] - u_IOE_guess[2],
        -             u[3] / scale[3] - u_IOE_guess[3],
        -             u[4] / scale[4] - u_IOE_guess[4],
        -             u[5] / scale[5] - u_IOE_guess[5],
        -             u[6] / scale[6] - u_IOE_guess[6],
        -         )
        - 
        -         # Update error and best guess if needed
     2112         error = norm(residual)
     2752         if error < best_residual
     1223             best_residual = error
     1223             best_guess = u_J2IOE_guess
        -         end
        - 
        -         # Update guess
     3356         u_J2IOE_guess = SVector{6,RT}(
        -             u_J2IOE_guess[1] + residual[1] * Req,
        -             clamp(u_J2IOE_guess[2] + residual[2], -1.0, 1.0),
        -             clamp(u_J2IOE_guess[3] + residual[3], -1.0, 1.0),
        -             clamp(u_J2IOE_guess[4] + residual[4], -1.0, 1.0),
        -             clamp(u_J2IOE_guess[5] + residual[5], -1.0, 1.0),
        -             u_J2IOE_guess[6] + residual[6],
        -         )
     1895     end
        - 
      178     return best_guess
        - end
        - 
        - """
        -     function cart2J2EqOE(u::AbstractVector{<:Number}, μ::Number)
        - 
        - Computes the J2 Perturbed Equinoctial Orbit Elements from a Cartesian state vector.
        - 
        - # Arguments
        - -`u::AbstractVector{<:Number}`: The Cartesian state vector [x; y; z; ẋ; ẏ; ż].
        - -`μ::Number`: Standard graviational parameter of central body.
        - 
        - # Returns
        - -`u_J2EqOE::SVector{6, <:Number}`: The J2 Perturbed Equinoctial Orbit Element vector [n; h; k; p; q; L].
        - """
      170 function cart2J2EqOE(u::AbstractVector{<:Number}, μ::Number)
      196     u_koe = cart2koe(u, μ)
      208     u_IOE = koe2IOE(u_koe, μ)
      208     u_J2IOE = IOE2J2IOE(u_IOE, μ)
        - 
      196     return IOE2modEqN(u_J2IOE, μ)
        - end
        - 
        - """
        -     function J2EqOE2cart(u::AbstractVector{<:Number}, μ::Number)
        - 
        - Computes the Cartesian state vector from a J2 Perturbed Equinoctial Orbit Elements.
        - 
        - # Arguments
        - -`u::AbstractVector{<:Number}`: The J2 Perturbed Equinoctial Orbit Element vector [n; h; k; p; q; L].
        - -`μ::Number`: Standard graviational parameter of central body.
        - 
        - # Returns
        - -`u_cart::SVector{6, <:Number}`: The Cartesian state vector [x; y; z; ẋ; ẏ; ż].
        - """
       72 function J2EqOE2cart(u::AbstractVector{<:Number}, μ::Number)
       72     u_J2IOE = modEqN2IOE(u, μ)
       72     u_IOE = J2IOE2IOE(u_J2IOE, μ)
       72     u_koe = IOE2koe(u_IOE, μ)
        - 
       72     return koe2cart(u_koe, μ)
        - end
